在JAVA语言出现以前，传统的异常处理方式多采用返回值来标识程序
出现的异常情况，这种方式虽然为程序员所熟悉，但却有多个坏处。

首先，一个API可以返回任意的返回值，而这些返回值本身并不能解
释该返回值是否代表一个异常情况发生了和该异常的具体情况，需要
调用API的程序自己判断并解释返回值的含义。

其次，并没有一种机制来保证异常情况一定会得到处理，调用程序可
以简单的忽略该返回值，需要调用API的程序员记住去检测返回值并
处理异常情况。这种方式还让程序代码变得冗长，尤其是当进行IO
操作等容易出现异常情况的处理时，代码的很大部分用于处理异常情
况的switch分支，程序代码的可读性变得很差。
